@page "/AoC2021"
<Article Title="2021 - Thoughts on Advent of code" Href="AoC2021" Sample="@Sample">
    <SampleContent>
        <p>It's that time of year again, the season of <a href="https://www.nationalgeographic.com/culture/article/advent-is-a-season-of-candlelight-reflection-and-expectation">advent</a> 
        every year there are some new programming puzzles published by <a href="http://was.tl/">Eric Wastl</a></p> 
        
        <p>
            This year I'm gonna try and keep a blog of thoughts and solutions, I've just completed the first day and
            I've completed it with f# - now I've never really looked into f#, I've always liked the idea of functional programming languages
            but have never dived in, so should be interesting and full of weird mistakes  
        </p>
    </SampleContent>
    <FullContent>
        
        <h2>Day 1: Sonar Sweep</h2>
        
        <p>
            Starting off with a bit of a simple puzzle this year (in my case), we just have to count how many times the
            number (in the list) has increased
        </p>
        
        <pre>
            <code>
                let increaseCalculator (contents: string)=
                    let lines = contents.Split(Environment.NewLine) |&gt; Array.toList
                    let intValues = lines |> List.map (fun x -&gt; x |&gt; Int32.Parse)
                    
                    let mutable count = 0;
                    let mutable currentLine = lines[0] |> int;
                    for line in intValues[1..] do
                        if line > currentLine then count &lt;- count + 1
                        currentLine &lt;- line
                        
                    count
            </code>
        </pre>
        
        <p>
            This was my solution, it didn't originally look like this, but after some refactoring I managed to get it down
            to this and it felt pretty good. <br/><br/>
            
            all though I have to admit that ugly loop in the middle there feels like a mistake, maybe there's a neater solution there
        </p>
        
        <h3>Part 2</h3>
        
        <p>
            Here we have decided to have a "sliding window" calculation so you have to sum three items together and then
            calculate how many times it has increased, I have to admit I did think about this for a little while before I
            came up with the solution that I could just store the indexes and then sum them.
        </p>
        
        <p>
            It doesn't specify what to do when the +2 range is larger than the array so I just made it so it takes the rest
            of the numbers in the list and sum them
        </p>
        
        <pre>
            <code>
                type SlidingWindow(value : int) =
                    let Value = value
                    
                    member _.value ()= Value
                        
                    static member fromLines(start:int, endIndex : int, lines : List&lt;int&gt;) : SlidingWindow =
                        let length = lines.Length - 1
                        if length &gt;= endIndex then SlidingWindow(List.sum lines[start..endIndex])
                        else SlidingWindow(List.sum lines[start..])
                    
                let windowIncreaseCalculator (contents: string)=
                    let lines = contents.Split(Environment.NewLine) |&gt; Array.toList
                    let intLines = List.map (fun x -&gt; x |&gt; Int32.Parse) lines
                    let thing = lines |> List.mapi (fun i _ -&gt; SlidingWindow.fromLines(i, i+2, intLines))
                        
                    let mutable result = 0
                    let mutable window = thing[0]
                    
                    for w in thing[1..] do
                        let nextWindow = w;
                        if nextWindow.value() &gt; window.value() then result &lt;- result + 1
                        window &lt;- nextWindow
                        
                    result
            </code>
        </pre>
        
        <p>
            Here is my solution for part 2. Again some refactoring and more use of functional concepts, I'm starting to like
            the operators in f# but there are so many 😅 again the loop feels wrong but maybe I'll revisit this and come up with 
            a better solution
        </p>
        
        
        <h3>... Revisited</h3>
        
        <p>
            After some googling I found that my feelings were correct, that the loops with mutable values was a little incorrect
            turns out there is a Seq class with some very useful functions, the one of interest here is pairwise, this takes the
            current element and the previous element and puts it into a tuple which means we can chain the code a little nicer:
        </p>
        
        <pre>
            <code>
                let increaseCalculator (contents: string)=
                    let lines = contents.Split(Environment.NewLine)
                                |> Seq.map (fun x -> x |> Int32.Parse)
                                |> Seq.pairwise
                                |> Seq.filter (fun (x,y) -> y > x)
                                |> Seq.toArray
                    lines.Length
            </code>
        </pre>
        
        <p>
            This is much nicer because we're not doing anything too complicated and everything chains off one another, we take the lines
            we convert each line into an int value, we pair each value with the next value we filter where the next value
            is larger than the previous value and then create an array, then we  just inspect the length of the array and
            we should get the correct value
        </p>
        
        <pre>
            <code>
                let increaseCalculator (contents: string)=
                    contents.Split(Environment.NewLine)
                        |> Seq.map (fun x -> x |> Int32.Parse)
                        |> Seq.pairwise
                        |> Seq.filter (fun (x,y) -> y > x)
                        |> Seq.length
            </code>
        </pre>
        
        <pre>
            <code>
                let getSlidingSum (lines : seq&lt;int>) : seq&lt;int> =
                    let linesList = lines |> Seq.toList
                    lines |> Seq.mapi (fun i _ -> linesList[i..i+2] |> List.sum)      
                           
                let windowIncreaseCalculator (contents: string)=
                    contents.Split(Environment.NewLine)
                        |> Seq.map (fun x -> x |> Int32.Parse)
                        |> getSlidingSum
                        |> Seq.pairwise
                        |> Seq.filter (fun (x,y) -> y > x)
                        |> Seq.length
            </code>
        </pre>
        
        <p>
            This is what I came up with for day 1 after a lot of googling and a lot of refactoring,
            I'm pretty happy with this for now, it looks really nice and everything is basically done
            in a way where the result is piped into the next method, so pretty functional apart from
            that one getSlidingSum, but for now I'm happy.
        </p>
        
        <p>
            This was a nice warm up puzzle for the coming days I think
        </p>
        
        
        <h1>Day 2: Dive!</h1>
        
        <p>
            Today was an interesting one, we have some small interpreter work, not too intense as there are only three
            operations, each have a operation and a parameter (which is a number), each operation does something different
        </p>
        
        <p>
            Interestingly when I was thinking about this one, I thought that it would be a good idea to have three different
            operation classes with a base operation and then each one just added what they needed to add - this was very OO 
            centric:
        </p>
        
        <pre>
            <code>
                module AdventOfCodeFsharp._2021.Day2
                
                open System
                
                type Ship(horizontal:int, depth:int) =
                    member _.horizontal ()= horizontal
                    member _.depth ()= depth
                    
                type Instruction(amount:int) =
                    abstract member execute : Ship -> Ship
                    
                    member _.amount ()= amount
                    
                    default _.execute(ship: Ship) : Ship =
                        ship
                        
                type ForwardInstruction(amount:int) =
                    inherit Instruction(amount)
                    
                    override _.execute(ship: Ship) : Ship =
                        Ship(ship.horizontal() + amount, ship.depth())
                        
                type UpInstruction(amount:int) =
                    inherit Instruction(amount)
                    
                    override _.execute(ship: Ship) : Ship =
                        Ship(ship.horizontal(), ship.depth() - amount)
                        
                type DownInstruction(amount:int) =
                    inherit Instruction(amount)
                
                    override _.execute(ship: Ship) : Ship =
                        Ship(ship.horizontal(), ship.depth() + amount)
                    
                let getInstruction(input:string) : Instruction =
                    let parts = input.Split(" ")
                    let value = parts[1] |> Int32.Parse
                    
                    match parts[0] with
                        | "forward" -> ForwardInstruction(value)   
                        | "down" -> DownInstruction(value)   
                        | "up" -> UpInstruction(value)
                        | _ -> failwith "todo"
                        
                let getInstructions (input:string) : List&lt;Instruction> =
                    input.Split(Environment.NewLine)
                        |> Array.map (fun elem -> elem |> getInstruction)
                        |> Array.toList
                        
                let executeInstructions (input :string) =
                    let mutable ship = Ship(0,0)
                    input
                        |> getInstructions
                        |> List.map (fun elem -> ship &lt;- ship |> elem.execute)
                        |> ignore
                        
                    ship
            </code>
        </pre>
    
        <p>
            Much like yesterday I thought of the mutable keyword as a code smell, but before revisiting that let's quickly talk 
            about the second challenge, today it was really not much different so I'll just pase my solution
        </p>
    
        <h2>Part 2</h2>
        <pre>
            <code>
                module AdventOfCodeFsharp._2021.Day2_2
                
                open System
                
                type Ship(horizontal:int, depth:int, aim:int) =
                    member _.horizontal ()= horizontal
                    member _.depth ()= depth
                    member _.aim ()= aim
                    
                type Instruction(amount:int) =
                    abstract member execute : Ship -> Ship
                    
                    member _.amount ()= amount
                    
                    default _.execute(ship: Ship) : Ship =
                        ship
                        
                type ForwardInstruction(amount:int) =
                    inherit Instruction(amount)
                    
                    override _.execute(ship: Ship) : Ship =
                        let newDepth = ship.depth() + (ship.aim() * amount)
                        Ship(ship.horizontal() + amount, newDepth, ship.aim())
                        
                type UpInstruction(amount:int) =
                    inherit Instruction(amount)
                    
                    override _.execute(ship: Ship) : Ship =
                        Ship(ship.horizontal(), ship.depth(), ship.aim() - amount)
                        
                type DownInstruction(amount:int) =
                    inherit Instruction(amount)
                
                    override _.execute(ship: Ship) : Ship =
                        Ship(ship.horizontal(), ship.depth() , ship.aim()+ amount)
                    
                let getInstruction(input:string) : Instruction =
                    let parts = input.Split(" ")
                    let value = parts[1] |> Int32.Parse
                    
                    match parts[0] with
                        | "forward" -> ForwardInstruction(value)   
                        | "down" -> DownInstruction(value)   
                        | "up" -> UpInstruction(value)
                        | _ -> failwith "todo"
                        
                let getInstructions (input:string) : List&lt;Instruction> =
                    input.Split(Environment.NewLine)
                        |> Array.map (fun elem -> elem |> getInstruction)
                        |> Array.toList
                        
                let executeInstructions (input :string) =
                    let mutable ship = Ship(0,0,0)
                    input
                        |> getInstructions
                        |> List.map (fun elem -> ship &lt;- ship |> elem.execute)
                        |> ignore
                    ship
            </code>
        </pre>
    
        <h2>....Revisited</h2>
    <p>
        So I started by thinking about what could change here, and my focus waas around the ship being mutable,
        I started to thinking about how I could store the state while going through the list and then it hit me that this was
        a reduce problem
    </p>
    
    <p>
        The first refactoring I did was to get rid of the instructions because they really weren't doing anything complicated
        instead I changed getInstruction to return the Ship with the values to change 
    </p>
    
    <pre>
<code>
let getInstruction(input:string) : Instruction =
    let parts = input.Split(" ")
    let value = parts[1] |> Int32.Parse
    
    match parts[0] with
        | "forward" -> Ship(value,0) 
        | "down" -> Ship(0,value) 
        | "up" -> Ship(0,-value) 
        | _ -> failwith "todo"
</code>
</pre>
    
    <p>
        Now I can change the map to a reduce function
        
        <code>
            Array.reduce (fun acc ship -> Ship(acc.horizontal() + ship.horizontal(), acc.depth() + ship.depth()) 
        </code>
    </p>
    
    
    
    <p>
        This got rid of the mutable stuff, but then I realized that the ship was just a tuple:
        
    </p>
    
    <pre>
        <code>
        let getInstruction(input:string)  =
            let parts = input.Split(" ")
            let value = parts[1] |> Int32.Parse
            
            match parts[0] with
                | "forward" -> (value, 0)   
                | "down" -> (0, value)  
                | "up" -> (0, -value)
                | _ -> failwith "todo"
        </code>
    </pre>
    <pre>
    <code>
        Array.reduce (fun (a,b) (c,d) -> (a+c, b+d)) 
    </code>
</pre>
    
    <p>
        Now we are getting more functional, we don't need Array.toList because we can keep it as an array which means that getInstructions
        is now redundant so here's my final solution
    </p>
    <pre>
    <code>
        let getInstruction(input:string)  =
            let parts = input.Split(" ")
            let value = parts[1] |> Int32.Parse
            
            match parts[0] with
                | "forward" -> (value, 0)   
                | "down" -> (0, value)  
                | "up" -> (0, -value)
                | _ -> failwith "todo"
                
        let executeInstructions (input :string) =
           input.Split(Environment.NewLine)
                |> Array.map (fun elem -> elem |> getInstruction)
                |> Array.reduce (fun (a,b) (c,d) -> (a+c, b+d)) 
    </code>
</pre>
    
    <p>
        After talking it through with some programmer friends I thought it interesting when someone brought up that the
        difference here is that we are thinking of the data as a collection and that there are three very popular functions
        that you can do to data which are map, reduce, filter. With these three functions we should be able to do most of 
        visualizations. 
    </p>
    
    <p>
        Thinking of things as a collection and function inputs and outputs and how one feeds into another is very interesting
        and I think this is how one tackles a functional problem
    </p>
    
    <h1>Day 3: Binary Diagnostic</h1>
    
    <p>
        Todays first puzzle was quite fun, we have a number which i represented in binary, we have to find the "most popular"
        value for each position and the least popular for each position and then multiply them together, today I was feeling good about this
        because I thought about the input/output and thought about things in collections and think I came up with a nice
        functional solution straight away
    </p>
    
    <pre>
        <code>
        let stringToIntArray (input: string) =
            input.ToCharArray()
                |> Array.map (fun elem -> elem.ToString() |> Int32.Parse)
                        
        let getGammaValue (input:string)=
            let length = input.Split(Environment.NewLine).Length /2
            let value = input.Split(Environment.NewLine)
                            |> Array.map (fun elem -> elem |> stringToIntArray)
                            |> Array.reduce (fun acc elem -> elem |> Array.map2 (+) acc)
                            |> Array.map (fun elem -> if elem > length then "1" else "0")
                            |> String.concat ""
                
            Convert.ToInt32(value, 2)
            
            
        let getEpsilonRate (input:string)=
            let length = input.Split(Environment.NewLine).Length /2
            let value = input.Split(Environment.NewLine)
                            |> Array.map (fun elem -> elem |> stringToIntArray)
                            |> Array.reduce (fun acc elem -> elem |> Array.map2 (+) acc)
                            |> Array.map (fun elem -> if elem > length then "0" else "1")
                            |> String.concat ""
                
            Convert.ToInt32(value, 2)
        </code>
    </pre>
    <p>
        I was quite sad to see that I couldn't "pipe into" the convert function there but beggers can't be choosers
    </p>
    
    <h2>Part 2</h2>
    
    <p>
        You know I thought after solving this in basically one shot in about 30 minutes I thought I'd finally got a grip
        on this whole functional thing, I tried looking at this from every angle I could think of, maybe if i reduced a map
        of the most popular numbers, maybe the other way round? maybe sideways?
    </p>
    
    <p>
        But no. I couldn't do it 😬
    </p>
    <pre>
        <code>
            let getMostPopularNumber (input:string[])=
                let length = if input.Length % 2 > 0 then input.Length/2 + 1 else input.Length /2
                input
                    |> Array.map (fun elem -> elem |> stringToIntArray)
                    |> Array.reduce (fun acc elem -> elem |> Array.map2 (+) acc)
                    |> Array.map (fun elem -> if elem >= length then "1" else "0")
                    
            let getLeastPopularNumber (input:string[])=
                let length = if input.Length % 2 > 0 then input.Length/2 + 1 else input.Length /2
                let thing = input
                                |> Array.map (fun elem -> elem |> stringToIntArray)
                                |> Array.reduce (fun acc elem -> elem |> Array.map2 (+) acc)
                Array.map (fun elem -> if elem >= length then "0" else "1") thing

            let getOxygenRating (input:string)=
                let mutable i =0
                let mutable values = input.Split(Environment.NewLine)
                    
                while values.Length > 1 do
                    let mostPopular = getMostPopularNumber(values)
                    values &lt;- values |> Array.filter (fun elem -> elem[i].ToString() = mostPopular[i])
                    i &lt;- i + 1

                Convert.ToInt32(values[0],2)
                
            let getco2Rating (input:string)=
                let mutable i =0
                let mutable values = input.Split(Environment.NewLine)

                while values.Length > 1 do
                    let mostPopular = getLeastPopularNumber(values)
                    values &lt;- values |> Array.filter (fun elem -> elem[i].ToString() = mostPopular[i])
                    i &lt;- i + 1

                Convert.ToInt32(values[0],2)
        </code>
    </pre>
    
    <p>
        I have thought about this eveyr way but Sunday and I just can't find a way to make it none mutable, so today sadly 
        no revisited, I have given up. It also didn't help that I misread the instructions for a good hour because 
        I wasn't recalculating the most (and least) popular number. Today made me happy then sad, this is the life
        of a programmer sometimes.
    </p>
    </FullContent>
</Article>


@code {
    [Parameter] public bool Sample { get; set; }
}